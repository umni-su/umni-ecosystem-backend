"""Create base tables

Revision ID: 6d403cdf4fa0
Revises: 
Create Date: 2025-08-24 15:53:53.203211

"""
#  Copyright (C) 2025 Mikhail Sazanov
#  #
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  #
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#  #
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

import sqlmodel

# revision identifiers, used by Alembic.
revision: str = '6d403cdf4fa0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('configuration',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_configuration_key'), 'configuration', ['key'], unique=True)
    op.create_index(op.f('ix_configuration_value'), 'configuration', ['value'], unique=False)
    op.create_table('devices',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('photo', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('type', sa.Integer(), nullable=True),
                    sa.Column('online', sa.Boolean(), nullable=False),
                    sa.Column('uptime', sa.BIGINT(), nullable=True),
                    sa.Column('free_heap', sa.Integer(), nullable=True),
                    sa.Column('total_heap', sa.Integer(), nullable=True),
                    sa.Column('fw_ver', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
                    sa.Column('last_sync', sa.DateTime(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_devices_last_sync'), 'devices', ['last_sync'], unique=False)
    op.create_index(op.f('ix_devices_name'), 'devices', ['name'], unique=True)
    op.create_index(op.f('ix_devices_online'), 'devices', ['online'], unique=False)
    op.create_index(op.f('ix_devices_type'), 'devices', ['type'], unique=False)
    op.create_table('locations',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('long', sa.Float(), nullable=True),
                    sa.Column('lat', sa.Float(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('notifications',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('to', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('type', sa.Integer(), nullable=False),
                    sa.Column('active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
                    sa.Column('options', sa.JSON(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_notifications_active'), 'notifications', ['active'], unique=False)
    op.create_index(op.f('ix_notifications_to'), 'notifications', ['to'], unique=False)
    op.create_index(op.f('ix_notifications_type'), 'notifications', ['type'], unique=False)
    op.create_table('rules',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('enabled', sa.Boolean(), nullable=False),
                    sa.Column('priority', sa.Integer(), nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_rules_enabled'), 'rules', ['enabled'], unique=False)
    op.create_table('storages',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('active', sa.Boolean(), nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('path')
                    )
    op.create_index(op.f('ix_storages_active'), 'storages', ['active'], unique=False)
    op.create_table('users',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('firstname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('lastname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_password'), 'users', ['password'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('cameras',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('active', sa.Boolean(), nullable=False),
                    sa.Column('storage_id', sa.Integer(), nullable=False),
                    sa.Column('location_id', sa.Integer(), nullable=True),
                    sa.Column('record', sa.Boolean(), nullable=False),
                    sa.Column('record_mode', sa.Integer(), nullable=True),
                    sa.Column('record_duration', sa.Integer(), nullable=True),
                    sa.Column('delete_after', sa.Integer(), nullable=True),
                    sa.Column('cover', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
                    sa.Column('fps', sa.Integer(), nullable=True),
                    sa.Column('scale', sa.Float(), nullable=True),
                    sa.Column('alerts', sa.Boolean(), nullable=False),
                    sa.Column('protocol', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('port', sa.Integer(), nullable=False),
                    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('primary', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('secondary', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
                    sa.ForeignKeyConstraint(['storage_id'], ['storages.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_cameras_active'), 'cameras', ['active'], unique=False)
    op.create_index(op.f('ix_cameras_alerts'), 'cameras', ['alerts'], unique=False)
    op.create_index(op.f('ix_cameras_location_id'), 'cameras', ['location_id'], unique=False)
    op.create_index(op.f('ix_cameras_record'), 'cameras', ['record'], unique=False)
    op.create_index(op.f('ix_cameras_storage_id'), 'cameras', ['storage_id'], unique=False)
    op.create_table('device_network_interfaces',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('device_id', sa.Integer(), nullable=True),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('mac', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(length=15), nullable=False),
                    sa.Column('mask', sqlmodel.sql.sqltypes.AutoString(length=15), nullable=False),
                    sa.Column('gw', sqlmodel.sql.sqltypes.AutoString(length=15), nullable=False),
                    sa.Column('last_sync', sa.DateTime(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_device_network_interfaces_device_id'), 'device_network_interfaces', ['device_id'],
                    unique=False)
    op.create_index(op.f('ix_device_network_interfaces_last_sync'), 'device_network_interfaces', ['last_sync'],
                    unique=False)
    op.create_index(op.f('ix_device_network_interfaces_mac'), 'device_network_interfaces', ['mac'], unique=True)
    op.create_table('device_sensors',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('device_id', sa.Integer(), nullable=True),
                    sa.Column('type', sa.Integer(), nullable=True),
                    sa.Column('identifier', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('visible_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('options', sa.JSON(), nullable=True),
                    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('photo', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('last_sync', sa.DateTime(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_device_sensors_device_id'), 'device_sensors', ['device_id'], unique=False)
    op.create_index(op.f('ix_device_sensors_identifier'), 'device_sensors', ['identifier'], unique=True)
    op.create_index(op.f('ix_device_sensors_last_sync'), 'device_sensors', ['last_sync'], unique=False)
    op.create_index(op.f('ix_device_sensors_type'), 'device_sensors', ['type'], unique=False)
    op.create_table('rule_nodes',
                    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('position', sa.JSON(), nullable=True),
                    sa.Column('rule_id', sa.Integer(), nullable=False),
                    sa.Column('data', sa.JSON(), nullable=True),
                    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('entity_id', sa.Integer(), nullable=True),
                    sa.Column('entity_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.ForeignKeyConstraint(['rule_id'], ['rules.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_rule_nodes_entity_id'), 'rule_nodes', ['entity_id'], unique=False)
    op.create_index(op.f('ix_rule_nodes_id'), 'rule_nodes', ['id'], unique=False)
    op.create_index(op.f('ix_rule_nodes_rule_id'), 'rule_nodes', ['rule_id'], unique=False)
    op.create_index(op.f('ix_rule_nodes_type'), 'rule_nodes', ['type'], unique=False)
    op.create_table('camera_areas',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('camera_id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('priority', sa.Integer(), nullable=False),
                    sa.Column('active', sa.Boolean(), server_default=sa.text('false'), nullable=False),
                    sa.Column('points', sa.JSON(), nullable=True),
                    sa.Column('color', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('options', sa.JSON(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['camera_id'], ['cameras.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_camera_areas_active'), 'camera_areas', ['active'], unique=False)
    op.create_index(op.f('ix_camera_areas_camera_id'), 'camera_areas', ['camera_id'], unique=False)
    op.create_table('camera_recordings',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.Column('camera_id', sa.Integer(), nullable=False),
                    sa.Column('start', sa.DateTime(), nullable=False),
                    sa.Column('end', sa.DateTime(), nullable=True),
                    sa.Column('duration', sa.Float(), nullable=True),
                    sa.Column('path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.ForeignKeyConstraint(['camera_id'], ['cameras.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_camera_recordings_camera_id'), 'camera_recordings', ['camera_id'], unique=False)
    op.create_index(op.f('ix_camera_recordings_end'), 'camera_recordings', ['end'], unique=False)
    op.create_index(op.f('ix_camera_recordings_start'), 'camera_recordings', ['start'], unique=False)
    op.create_table('device_sensors_history',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('sensor_id', sa.Integer(), nullable=True),
                    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['sensor_id'], ['device_sensors.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_device_sensors_history_sensor_id'), 'device_sensors_history', ['sensor_id'], unique=False)
    op.create_table('rule_edges',
                    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('source', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('target', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('source_handle', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('target_handle', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('rule_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['rule_id'], ['rules.id'], ),
                    sa.ForeignKeyConstraint(['source'], ['rule_nodes.id'], ),
                    sa.ForeignKeyConstraint(['target'], ['rule_nodes.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_rule_edges_id'), 'rule_edges', ['id'], unique=False)
    op.create_index(op.f('ix_rule_edges_rule_id'), 'rule_edges', ['rule_id'], unique=False)
    op.create_index(op.f('ix_rule_edges_source'), 'rule_edges', ['source'], unique=False)
    op.create_index(op.f('ix_rule_edges_source_handle'), 'rule_edges', ['source_handle'], unique=False)
    op.create_index(op.f('ix_rule_edges_target'), 'rule_edges', ['target'], unique=False)
    op.create_index(op.f('ix_rule_edges_target_handle'), 'rule_edges', ['target_handle'], unique=False)
    op.create_table('camera_events',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('camera_id', sa.Integer(), nullable=False),
                    sa.Column('area_id', sa.Integer(), nullable=True),
                    sa.Column('action', sa.Integer(), nullable=True),
                    sa.Column('type', sa.Integer(), nullable=True),
                    sa.Column('start', sa.DateTime(), nullable=False),
                    sa.Column('end', sa.DateTime(), nullable=True),
                    sa.Column('resized', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('original', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('duration', sa.Integer(), nullable=True),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.Column('camera_recording_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['area_id'], ['camera_areas.id'], ),
                    sa.ForeignKeyConstraint(['camera_id'], ['cameras.id'], ),
                    sa.ForeignKeyConstraint(['camera_recording_id'], ['camera_recordings.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_camera_events_action'), 'camera_events', ['action'], unique=False)
    op.create_index(op.f('ix_camera_events_area_id'), 'camera_events', ['area_id'], unique=False)
    op.create_index(op.f('ix_camera_events_camera_id'), 'camera_events', ['camera_id'], unique=False)
    op.create_index(op.f('ix_camera_events_camera_recording_id'), 'camera_events', ['camera_recording_id'],
                    unique=False)
    op.create_index(op.f('ix_camera_events_duration'), 'camera_events', ['duration'], unique=False)
    op.create_index(op.f('ix_camera_events_end'), 'camera_events', ['end'], unique=False)
    op.create_index(op.f('ix_camera_events_start'), 'camera_events', ['start'], unique=False)
    op.create_index(op.f('ix_camera_events_type'), 'camera_events', ['type'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_camera_events_type'), table_name='camera_events')
    op.drop_index(op.f('ix_camera_events_start'), table_name='camera_events')
    op.drop_index(op.f('ix_camera_events_end'), table_name='camera_events')
    op.drop_index(op.f('ix_camera_events_duration'), table_name='camera_events')
    op.drop_index(op.f('ix_camera_events_camera_recording_id'), table_name='camera_events')
    op.drop_index(op.f('ix_camera_events_camera_id'), table_name='camera_events')
    op.drop_index(op.f('ix_camera_events_area_id'), table_name='camera_events')
    op.drop_index(op.f('ix_camera_events_action'), table_name='camera_events')
    op.drop_table('camera_events')
    op.drop_index(op.f('ix_rule_edges_target_handle'), table_name='rule_edges')
    op.drop_index(op.f('ix_rule_edges_target'), table_name='rule_edges')
    op.drop_index(op.f('ix_rule_edges_source_handle'), table_name='rule_edges')
    op.drop_index(op.f('ix_rule_edges_source'), table_name='rule_edges')
    op.drop_index(op.f('ix_rule_edges_rule_id'), table_name='rule_edges')
    op.drop_index(op.f('ix_rule_edges_id'), table_name='rule_edges')
    op.drop_table('rule_edges')
    op.drop_index(op.f('ix_device_sensors_history_sensor_id'), table_name='device_sensors_history')
    op.drop_table('device_sensors_history')
    op.drop_index(op.f('ix_camera_recordings_start'), table_name='camera_recordings')
    op.drop_index(op.f('ix_camera_recordings_end'), table_name='camera_recordings')
    op.drop_index(op.f('ix_camera_recordings_camera_id'), table_name='camera_recordings')
    op.drop_table('camera_recordings')
    op.drop_index(op.f('ix_camera_areas_camera_id'), table_name='camera_areas')
    op.drop_index(op.f('ix_camera_areas_active'), table_name='camera_areas')
    op.drop_table('camera_areas')
    op.drop_index(op.f('ix_rule_nodes_type'), table_name='rule_nodes')
    op.drop_index(op.f('ix_rule_nodes_rule_id'), table_name='rule_nodes')
    op.drop_index(op.f('ix_rule_nodes_id'), table_name='rule_nodes')
    op.drop_index(op.f('ix_rule_nodes_entity_id'), table_name='rule_nodes')
    op.drop_table('rule_nodes')
    op.drop_index(op.f('ix_device_sensors_type'), table_name='device_sensors')
    op.drop_index(op.f('ix_device_sensors_last_sync'), table_name='device_sensors')
    op.drop_index(op.f('ix_device_sensors_identifier'), table_name='device_sensors')
    op.drop_index(op.f('ix_device_sensors_device_id'), table_name='device_sensors')
    op.drop_table('device_sensors')
    op.drop_index(op.f('ix_device_network_interfaces_mac'), table_name='device_network_interfaces')
    op.drop_index(op.f('ix_device_network_interfaces_last_sync'), table_name='device_network_interfaces')
    op.drop_index(op.f('ix_device_network_interfaces_device_id'), table_name='device_network_interfaces')
    op.drop_table('device_network_interfaces')
    op.drop_index(op.f('ix_cameras_storage_id'), table_name='cameras')
    op.drop_index(op.f('ix_cameras_record'), table_name='cameras')
    op.drop_index(op.f('ix_cameras_location_id'), table_name='cameras')
    op.drop_index(op.f('ix_cameras_alerts'), table_name='cameras')
    op.drop_index(op.f('ix_cameras_active'), table_name='cameras')
    op.drop_table('cameras')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_password'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_storages_active'), table_name='storages')
    op.drop_table('storages')
    op.drop_index(op.f('ix_rules_enabled'), table_name='rules')
    op.drop_table('rules')
    op.drop_index(op.f('ix_notifications_type'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_to'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_active'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_table('locations')
    op.drop_index(op.f('ix_devices_type'), table_name='devices')
    op.drop_index(op.f('ix_devices_online'), table_name='devices')
    op.drop_index(op.f('ix_devices_name'), table_name='devices')
    op.drop_index(op.f('ix_devices_last_sync'), table_name='devices')
    op.drop_table('devices')
    op.drop_index(op.f('ix_configuration_value'), table_name='configuration')
    op.drop_index(op.f('ix_configuration_key'), table_name='configuration')
    op.drop_table('configuration')
    # ### end Alembic commands ###
