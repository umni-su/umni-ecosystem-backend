"""Create rules tables

Revision ID: d22808b5f0bc
Revises:
Create Date: 2025-08-17 16:33:25.254181

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = 'd22808b5f0bc'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Создаем ENUM типы если они не существуют
    rulenodetypes = postgresql.ENUM(
        'TRIGGER', 'CONDITION', 'ENTITY', 'ACTION', 'START', 'END',
        name='rulenodetypes',
        create_type=False
    )
    rulenodetypekeys = postgresql.ENUM(
        'RULE_START', 'RULE_END', 'SENSORS_CHANGES', 'DEVICES_CHANGES',
        'MOTION_START', 'MOTION_END', 'ALARM_ON', 'ALARM_OFF',
        'ACTION_EMAIL', 'ACTION_TELEGRAM', 'ACTION_WEBHOOK',
        name='rulenodetypekeys',
        create_type=False
    )
    ruleentitytype = postgresql.ENUM(
        'DEVICE', 'SENSOR', 'CAMERA',
        name='ruleentitytype',
        create_type=False
    )

    # Создаем типы только если они не существуют
    rulenodetypes.create(bind=op.get_bind(), checkfirst=True)
    rulenodetypekeys.create(bind=op.get_bind(), checkfirst=True)
    ruleentitytype.create(bind=op.get_bind(), checkfirst=True)

    # Создаем таблицы
    op.create_table('rules',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('enabled', sa.Boolean(), nullable=False),
                    sa.Column('priority', sa.Integer(), nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('updated', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('rule_nodes',
                    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('type', rulenodetypes, nullable=False),
                    sa.Column('position', sa.JSON(), nullable=True),
                    sa.Column('rule_id', sa.Integer(), nullable=False),
                    sa.Column('data', sa.JSON(), nullable=True),
                    sa.Column('key', rulenodetypekeys, nullable=True),
                    sa.Column('entity_id', sa.Integer(), nullable=True),
                    sa.Column('entity_type', ruleentitytype, nullable=True),
                    sa.ForeignKeyConstraint(['rule_id'], ['rules.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('rule_edges',
                    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('source', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('target', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('source_handle', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('target_handle', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('rule_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['rule_id'], ['rules.id'], ),
                    sa.ForeignKeyConstraint(['source'], ['rule_nodes.id'], ),
                    sa.ForeignKeyConstraint(['target'], ['rule_nodes.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rule_edges')
    op.drop_table('rule_nodes')
    op.drop_table('rules')

    # Удаляем ENUM типы
    rulenodetypes = postgresql.ENUM(
        name='rulenodetypes',
        create_type=False
    )
    rulenodetypekeys = postgresql.ENUM(
        name='rulenodetypekeys',
        create_type=False
    )
    ruleentitytype = postgresql.ENUM(
        name='ruleentitytype',
        create_type=False
    )

    # Удаляем типы только если они существуют
    ruleentitytype.drop(bind=op.get_bind(), checkfirst=True)
    rulenodetypekeys.drop(bind=op.get_bind(), checkfirst=True)
    rulenodetypes.drop(bind=op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
