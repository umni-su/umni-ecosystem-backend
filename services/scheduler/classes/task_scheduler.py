import time
from datetime import datetime

import schedule
from functools import partial
from threading import Thread, Event
from typing import Callable, Dict, Optional, Any, List

from classes.logger import Logger
from services.scheduler.enums.schedule_frequency import ScheduleFrequency
from services.scheduler.models.task_config import TaskConfig
from services.scheduler.models.task_info import TaskInfo, TaskStatus
from services.scheduler.models.task_schedule import TaskSchedule


class TaskScheduler:
    def __init__(self):
        self.tasks: Dict[str, Dict[str, Any]] = {}
        self.task_registry: Dict[str, Callable] = {}
        self._stop_event = Event()
        self._scheduler_thread = None

    def add_task(
            self,
            func: Callable,
            schedule_cfg: TaskSchedule,
            task_name: Optional[str] = None,
            args: tuple = (),
            kwargs: dict = {},
            max_retries: int = 0,
            retry_delay: float = 1.0
    ) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ–¥–Ω–æ–º –º–µ—Ç–æ–¥–µ

        :param func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        :param schedule_cfg: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        :param task_name: –ò–º—è –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏)
        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        :param kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        :param max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        :param retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        """
        name = task_name or func.__name__

        if name in self.tasks:
            Logger.err(f"Task '{name}' already exists")
            return False

        self.task_registry[name] = func
        Logger.info(f"üìÜ Registered task function: {name}")

        task_config = TaskConfig(
            name=name,
            func=name,
            args=args,
            kwargs=kwargs,
            max_retries=max_retries,
            retry_delay=retry_delay
        )

        self.tasks[name] = {
            'config': task_config,
            'schedule': schedule_cfg
        }

        self._schedule_task(name)
        return True

    def _schedule_task(self, task_name: str):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º next_run"""
        if task_name not in self.tasks:
            return

        task = self.tasks[task_name]
        schedule_cfg = task['schedule']
        task_func = partial(self._run_task, task_name)

        try:
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            old_job = self._find_schedule_job(task_name)
            job = None
            if old_job:
                schedule.cancel_job(old_job)

            # –î–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            if schedule_cfg.frequency in [
                ScheduleFrequency.MONDAY, ScheduleFrequency.TUESDAY,
                ScheduleFrequency.WEDNESDAY, ScheduleFrequency.THURSDAY,
                ScheduleFrequency.FRIDAY, ScheduleFrequency.SATURDAY,
                ScheduleFrequency.SUNDAY
            ]:
                scheduler = getattr(schedule.every(), schedule_cfg.frequency.value)
                if schedule_cfg.at_time:
                    job = scheduler.at(schedule_cfg.at_time).do(task_func)
                else:
                    job = scheduler.do(task_func)

            # –î–ª—è –¥–Ω–µ–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            elif schedule_cfg.frequency == ScheduleFrequency.DAY:
                job = schedule.every(schedule_cfg.interval).days
                if schedule_cfg.at_time:
                    job = job.at(schedule_cfg.at_time).do(task_func)
                else:
                    job = job.do(task_func)

            # –î–ª—è —á–∞—Å–æ–≤
            elif schedule_cfg.frequency == ScheduleFrequency.HOUR:
                job = schedule.every(schedule_cfg.interval).hours.do(task_func)

            # –î–ª—è –º–∏–Ω—É—Ç
            elif schedule_cfg.frequency == ScheduleFrequency.MINUTE:
                job = schedule.every(schedule_cfg.interval).minutes.do(task_func)

            # –î–ª—è –Ω–µ–¥–µ–ª—å
            elif schedule_cfg.frequency == ScheduleFrequency.WEEK:
                job = schedule.every(schedule_cfg.interval).weeks
                if schedule_cfg.at_time:
                    job = job.at(schedule_cfg.at_time).do(task_func)
                else:
                    job = job.do(task_func)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º job –≤ –∑–∞–¥–∞—á–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            if job:
                task['job'] = job
                Logger.info(f"üìÜ Task '{task_name}' scheduled. Next run: {job.next_run}")

        except Exception as e:
            Logger.err(f"üìÜ Failed to schedule task '{task_name}': {str(e)}")

    def _run_task(self, task_name: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º next_run"""
        if task_name not in self.tasks:
            return

        task = self.tasks[task_name]
        config = task['config']
        func = self.task_registry.get(config.func)
        job = self._find_schedule_job(task_name)

        if not func:
            Logger.err(f"Function not found for task '{task_name}'")
            return

        try:
            # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            start_time = datetime.now()

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result = func(*config.args, **config.kwargs)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            if job:
                job.last_run = start_time  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                job.last_result = "success"

                # –í—Ä—É—á–Ω—É—é –≤—ã—á–∏—Å–ª—è–µ–º next_run –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                if hasattr(job, 'period'):
                    next_run = start_time + job.period
                    Logger.info(f"‚úÖ Task '{task_name}' completed. Next run: {next_run}")
                else:
                    Logger.info(f"‚úÖ Task '{task_name}' completed")

            return result

        except Exception as e:
            error_msg = str(e)
            Logger.err(f"‚ùå Task '{task_name}' failed: {error_msg}")
            if job:
                job.last_run = datetime.now()
                job.last_result = f"error: {error_msg}"

            if config.max_retries > 0:
                time.sleep(config.retry_delay)
                self._run_task(task_name)

    def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self._scheduler_thread and self._scheduler_thread.is_alive():
            Logger.warn("üìÜ Scheduler already running")
            return False

        self._stop_event.clear()

        def run_scheduler():
            Logger.info("üìÜ Scheduler started")
            while not self._stop_event.is_set():
                try:
                    schedule.run_pending()
                    time.sleep(1)
                except Exception as e:
                    Logger.err(f"üìÜ Scheduler error: {str(e)}")
                    time.sleep(5)

            Logger.info("üìÜ Scheduler stopped")

        self._scheduler_thread = Thread(target=run_scheduler, daemon=True)
        self._scheduler_thread.start()
        return True

    def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self._scheduler_thread or not self._scheduler_thread.is_alive():
            Logger.warn("Scheduler not running")
            return False

        self._stop_event.set()
        self._scheduler_thread.join(timeout=5)
        Logger.info("Scheduler stopped successfully")
        return True

    def run_task_now(self, task_name: str) -> bool:
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏"""
        if task_name not in self.tasks:
            Logger.err(f"Task '{task_name}' not found")
            return False

        Thread(target=self._run_task, args=(task_name,), daemon=True).start()
        return True

    def run_all_tasks_now(self) -> List[str]:
        """
        –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        """
        started_tasks = []
        for task_name in self.tasks:
            if self.run_task_now(task_name):
                started_tasks.append(task_name)
        return started_tasks

    def get_task_info(self, task_name: str) -> Optional[TaskInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º next_run"""
        if task_name not in self.tasks:
            return None

        task_data = self.tasks[task_name]
        job = self._find_schedule_job(task_name)

        if job:
            # –í—ã—á–∏—Å–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ next_run
            next_run = self.get_next_run_time(task_name)
        else:
            next_run = None

        return TaskInfo(
            name=task_name,
            status=TaskStatus.ACTIVE if job and job.should_run else TaskStatus.PAUSED,
            next_run=next_run,
            frequency=task_data['schedule'].frequency.value,
            interval=task_data['schedule'].interval,
            at_time=task_data['schedule'].at_time,
            last_run=getattr(job, 'last_run', None),
            last_result=getattr(job, 'last_result', None)
        )

    def get_all_tasks_info(self) -> List[TaskInfo]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∑–∞–¥–∞—á–∞—Ö
        """
        return [self.get_task_info(name) for name in self.tasks.keys()]

    def _find_schedule_job(self, task_name: str):
        """–ù–∞—Ö–æ–¥–∏—Ç job –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π"""
        if task_name in self.tasks and 'job' in self.tasks[task_name]:
            return self.tasks[task_name]['job']

        task_func = partial(self._run_task, task_name)
        for job in schedule.jobs:
            if job.job_func == task_func:
                return job
        return None

    def pause_task(self, task_name: str) -> bool:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É"""
        job = self._find_schedule_job(task_name)
        if job:
            job.cancel()
            return True
        return False

    def resume_task(self, task_name: str) -> bool:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É"""
        if task_name not in self.tasks:
            return False
        self._schedule_task(task_name)
        return True

    def get_next_run_time(self, task_name: str) -> Optional[datetime]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        if task_name not in self.tasks:
            return None

        job = self._find_schedule_job(task_name)
        if not job:
            return None

        if hasattr(job, 'last_run') and hasattr(job, 'period'):
            return job.last_run + job.period
        return job.next_run
