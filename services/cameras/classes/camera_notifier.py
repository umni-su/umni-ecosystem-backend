import os
import traceback
from threading import Thread
from typing import Callable, Any, TYPE_CHECKING
import database.database as db

from classes.logger import Logger
from classes.storages.camera_storage import CameraStorage
from classes.websockets.messages.ws_message_detection import (
    WebsocketMessageDetectionStart,
    WebsocketMessageDetectionEnd
)
from classes.websockets.websockets import WebSockets
from entities.camera import CameraEntity
from entities.camera_area import CameraAreaEntity
from entities.camera_recording import CameraRecordingEntity
from entities.enums.camera_record_type_enum import CameraRecordTypeEnum
from entities.camera_event import CameraEventEntity
from services.cameras.classes.roi_tracker import ROIDetectionEvent, ROIRecordEvent, ROIEventType

if TYPE_CHECKING:
    from services.cameras.classes.camera_stream import CameraStream


class CameraNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö —Å –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π.
    –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
    """

    active_events: list[CameraEventEntity] = []
    active_recordings: list[CameraRecordingEntity] = []

    @staticmethod
    def _find_active_event(area_id: int):
        for event in CameraNotifier.active_events:
            if event.area_id == area_id:
                return event
        return None

    @staticmethod
    def _find_active_recording(camera_id: int):
        for record in CameraNotifier.active_recordings:
            if record.camera_id == camera_id:
                return record
        return None

    @staticmethod
    def handle_motion_start(event: "ROIDetectionEvent", stream: "CameraStream"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –∑–æ–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (ROI).
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.

        Args:
            event (ROIDetectionEvent): –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            stream: (CameraStream)
        """
        CameraNotifier._notify_in_thread(CameraNotifier._on_motion_start, event, stream)

    @staticmethod
    def handle_motion_end(event: "ROIDetectionEvent", stream: "CameraStream"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –∑–æ–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (ROI).
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.

        Args:
            event (ROIDetectionEvent): –°–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            stream: (CameraStream)
        """
        CameraNotifier._notify_in_thread(CameraNotifier._on_motion_end, event, stream)

    @staticmethod
    def handle_recording_start(event: "ROIRecordEvent", stream: "CameraStream"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å –∫–∞–º–µ—Ä—ã.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.

        Args:
            event (ROIRecordEvent): –°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
            stream:
        """
        CameraNotifier._notify_in_thread(CameraNotifier._on_recording_start, event, stream)

    @staticmethod
    def handle_recording_end(event: "ROIRecordEvent", stream: "CameraStream"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –∫–∞–º–µ—Ä—ã.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.

        Args:
            event (ROIRecordEvent): –°–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            stream: (CameraStream)
        """
        CameraNotifier._notify_in_thread(CameraNotifier._on_recording_end, event, stream)

    @staticmethod
    def _on_motion_start(event: "ROIDetectionEvent", stream: "CameraStream"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ.

        Args:
            event (ROIDetectionEvent): –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        """
        with db.get_separate_session() as sess:
            camera = sess.get(CameraEntity, event.camera.id)
            area = sess.get(CameraAreaEntity, event.roi.id)
            if area is None:
                Logger.err(f"‚ö†Ô∏è [{camera.name}] area is None")
                return
            key = area.id

            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —ç—Ç–æ–π ROI, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            founded_event = CameraNotifier._find_active_event(key)

            if founded_event is not None:
                return
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            event_entity = CameraEventEntity(
                camera=camera,
                area=area,
                start=event.timestamp,
                type=camera.record_mode,
                action=ROIEventType.MOTION_START
            )

            screenshot = CameraStorage.take_detection_screenshot(camera, event.frame, 'R')
            event_entity.resized = os.path.join(screenshot.directory, screenshot.filename)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ - —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è
            original = CameraStorage.take_detection_screenshot(camera, event.original, 'O')
            event_entity.original = os.path.join(original.directory, original.filename)

            new_record: bool = False

            # –î–ª—è —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å —Å–µ—Å—Å–∏–µ–π –∑–∞–ø–∏—Å–∏
            # if camera.record_mode == CameraRecordTypeEnum.DETECTION_VIDEO:
            #     founded_record = CameraNotifier._find_active_recording(event.camera.id)
            #     if founded_record is None:
            #         new_record = True
            #         recording = CameraRecordingEntity(
            #             camera_id=event.camera.id,
            #             start=event.timestamp
            #         )
            #         # sess.add(recording)
            #         if event_entity.recording is None:
            #             event_entity.recording = recording
            #         # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –¥–≤–∏–∂–µ–Ω–∏—è
            #         stream.destroy_writer()
            #         stream.create_writer(CameraStorage.video_detections_path(stream.camera))
            #     else:
            #         event_entity.camera_recording_id = founded_record.id

            sess.add(event_entity)
            sess.commit()
            sess.refresh(event_entity)

            message = WebsocketMessageDetectionStart(
                camera_id=event_entity.camera.id,
                message=f'[{event_entity.camera.name}] Motion detected at {event_entity.start}',
            )
            WebSockets.send_broadcast(message)

            Logger.debug(
                f"üëã [{camera.name} EvID#{event_entity.id}] –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è –≤ {event_entity.area.name}. –í—Ä–µ–º—è: {event_entity.start}")
            # if new_record:
            # CameraNotifier.active_recordings.append(recording)
            CameraNotifier.active_events.append(event_entity)

    @staticmethod
    def _on_motion_end(event: "ROIDetectionEvent", stream: "CameraStream"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ.

        Args:
            event (ROIDetectionEvent): –°–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        """
        with db.get_separate_session() as sess:
            key = event.roi.id

            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            founded_event = CameraNotifier._find_active_event(key)
            if founded_event is None:
                return

            event_entity = sess.get(CameraEventEntity, founded_event.id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            event_entity.action = ROIEventType.MOTION_END
            event_entity.end = event.timestamp
            event_entity.duration = (event.timestamp - event_entity.start).total_seconds()

            sess.add(event_entity)
            sess.commit()
            sess.refresh(event_entity)

            message = WebsocketMessageDetectionStart(
                camera_id=event_entity.camera.id,
                message=f'[{event_entity.camera.name}] Motion detected end at {event_entity.end}, duration: {event_entity.duration}',
            )
            WebSockets.send_broadcast(message)

            CameraNotifier.active_events.remove(founded_event)
            Logger.debug(
                f"üëã [{event_entity.camera.name} EvID#{event_entity.id}] –ö–æ–Ω–µ—Ü –¥–≤–∏–∂–µ–Ω–∏—è –≤ {event_entity.area.name}. –í—Ä–µ–º—è: {event_entity.end}")

    @staticmethod
    def _on_recording_start(event: "ROIRecordEvent", stream: "CameraStream"):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ —Å –∫–∞–º–µ—Ä—ã.

        Args:
            event (ROIRecordEvent): –°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
        """
        Logger.debug(f"[{event.timestamp}] –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å —Å –∫–∞–º–µ—Ä—ã {event.camera.name} –≤ {event.timestamp}")

    @staticmethod
    def _on_recording_end(event: "ROIRecordEvent", stream: "CameraStream"):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å –∫–∞–º–µ—Ä—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏.

        Args:
            event (ROIRecordEvent): –°–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        """
        with db.get_separate_session() as sess:
            founded_record = CameraNotifier._find_active_recording(event.camera.id)
            if isinstance(founded_record, CameraRecordingEntity):
                recording = sess.merge(founded_record)
                recording = sess.get(CameraRecordingEntity, recording.id)
                recording.end = event.timestamp
                recording.duration = (event.timestamp - recording.start).total_seconds()
                recording.path = stream.writer_file

                # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–π –∫–∞–º–µ—Ä—ã
                # for key in list(CameraNotifier.active_events.keys()):
                #     if key[0] == event.camera.id:
                #         CameraNotifier.handle_motion_end(
                #             ROIDetectionEvent(
                #                 camera=event.camera,
                #                 roi=event.rois[0],  # –ü—Ä–∏–º–µ—Ä–Ω–æ, –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å
                #                 timestamp=event.timestamp
                #             ),
                #             stream
                #         )

                sess.commit()
                CameraNotifier.active_recordings.remove(founded_record)
                Logger.debug(
                    f"[{recording.end}] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å {event.camera.name}. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {recording.duration:.2f} —Å–µ–∫")
                stream.destroy_writer()

    @staticmethod
    def _notify_in_thread(target: Callable, *args: Any, **kwargs: Any) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

        Args:
            target (Callable): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ
            *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

        –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –µ—ë —Å –¥–µ—Ç–∞–ª—è–º–∏.
        """

        def wrapped_target():
            try:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –∏ —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ - —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
                actual_args = args[0] if len(args) == 1 and isinstance(args[0], tuple) else args
                target(*actual_args, **kwargs)
            except Exception as e:
                error_msg = (
                    f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}\n"
                    f"–¢–∏–ø: {type(e).__name__}\n"
                    f"–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {target.__name__}\n"
                    f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: args={args}, kwargs={kwargs}\n"
                    f"–¢—Ä–µ–π—Å–±—ç–∫:\n{traceback.format_exc()}"
                )
                Logger.err(error_msg)

        thread = Thread(
            daemon=True,
            target=wrapped_target,
            name=f"CameraNotifierThread-{target.__name__}"  # –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        )
        thread.start()
        Logger.debug(f"üêç –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ {target.__name__} (ID: {thread.native_id})")
